
package kr.nomad.mars;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.ibm.icu.util.Calendar;
import com.oreilly.servlet.MultipartRequest;


import kr.nomad.mars.dao.ConfigDao;

import kr.nomad.mars.dao.MagazineDao;
import kr.nomad.mars.dao.MedExamDao;
import kr.nomad.mars.dao.NoticeDao;
import kr.nomad.mars.dao.QnaDao;
import kr.nomad.mars.dao.UserActivityDao;
import kr.nomad.mars.dao.UserAdvancedDao;
import kr.nomad.mars.dao.UserBasicDao;
import kr.nomad.mars.dao.UserBloodDao;
import kr.nomad.mars.dao.UserCheckupDao;
import kr.nomad.mars.dao.UserCholDao;
import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dao.UserDrinkDao;
import kr.nomad.mars.dao.UserIndexDao;
import kr.nomad.mars.dao.UserPressDao;
import kr.nomad.mars.dao.UserSmokeDao;
import kr.nomad.mars.dao.UserWeightDao;
import kr.nomad.mars.dto.Config;
import kr.nomad.mars.dto.Magazine;
import kr.nomad.mars.dto.MedExam;
import kr.nomad.mars.dto.Notice;
import kr.nomad.mars.dto.Qna;
import kr.nomad.mars.dto.User;
import kr.nomad.mars.dto.UserActivity;
import kr.nomad.mars.dto.UserAdvanced;
import kr.nomad.mars.dto.UserBasic;
import kr.nomad.mars.dto.UserBlood;
import kr.nomad.mars.dto.UserCheckup;
import kr.nomad.mars.dto.UserChol;
import kr.nomad.mars.dto.UserDrink;
import kr.nomad.mars.dto.UserIndex;
import kr.nomad.mars.dto.UserPress;
import kr.nomad.mars.dto.UserSmoke;
import kr.nomad.mars.dto.UserWeight;
import kr.nomad.util.F;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.Paging;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import kr.nomad.util.XlsxWriter;
import kr.nomad.util.file.UniqFileRenamePolicy;
import net.sf.json.JSONObject;

@Controller
public class AdminController {

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	@Autowired UserDao userdao;
	@Autowired NoticeDao noticedao;
	@Autowired MagazineDao magaDao;
	@Autowired ConfigDao configdao;
	@Autowired UserPressDao userPressDao;
	@Autowired UserBloodDao userBloodDao;
	@Autowired UserCholDao userCholDao;
	@Autowired UserWeightDao userWeightDao;
	@Autowired UserActivityDao  userActivityDao;
	@Autowired UserSmokeDao userSmokeDao;
	@Autowired UserDrinkDao userDrinkDao;
	@Autowired UserAdvancedDao userAdvancedDao;
	@Autowired UserIndexDao userIndexDao;
	@Autowired MedExamDao medExamDao;
	@Autowired UserBasicDao userBasicDao;
	@Autowired UserCheckupDao userCheckupDao;
	@Autowired NoticeDao noticeDao;
	@Autowired QnaDao qnaDao;
	
	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;

	public String SERVER_DOMAIN = "http://mint.aimmed.com:8070";
	public String GOOGLE_MAIL_ID = "aimmednote@gmail.com";
	public String GOOGLE_MAIL_PW = "Tkdfkdlxm*";
	
	public String DEFAULT_COUNSELOR_ID = "counselor@test.com";


	@RequestMapping("/main.go")
	public String wUserMenuController(Model model) {

		return "/admin/login";
	}
	
	@RequestMapping("/admin/main.go")
	public String mainController(Model model) {
		
		
		List<User>list=userdao.getUserTop3();
		model.addAttribute("user", list);
		
		
		return "/admin/main";
	}
	
	// 관리자 헤더 count
	@RequestMapping("/admin/count.go")
	public String adminCountController(HttpSession session, Model model, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		int manCount = userdao.getCount(User.USERTYPE_USER);
	
		
		map.put("Count", manCount);
	
		map.put("result", result);
		map.put("message", message);

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;

	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/////////////////////공지사항

	// 공지사항
	@RequestMapping("/admin/board/notice/notice.go")
	public String noticeController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/board/notice/notice";
	}

	// 공지사항 리스트

	@RequestMapping("/admin/board/notice/notice_list.go")
	public String noticeListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		List<Notice> list = null;
		int count = 0;
		int notiType = 0;

		

		list = noticeDao.getNoticeMainList(keyword, page,ITEM_COUNT_PER_PAGE);
		count = noticeDao.getNoticeMainCount(keyword);
		

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);
		return "admin/board/notice/notice_list";
	}

	// 공지사항 등록/수정
	@RequestMapping("/admin/board/notice/notice_edit.go")
	public String noticeEditController(
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			Model model) {

		Notice notice = null;
		if (noticeSeq == 0) {
			notice = new Notice();
		} else {
			notice = noticeDao.getNotice(noticeSeq);
		}

		model.addAttribute("notice", notice);

		return "admin/board/notice/notice_edit";
	}

	// 공지사항 수정의 처리
	@RequestMapping("/admin/board/notice/notice_edit_do.go")
	public String noticeEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "0") int noticeSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "startDate", required = false, defaultValue = "") String startDate,
			@RequestParam(value = "endDate", required = false, defaultValue = "") String endDate,
			@RequestParam(value = "notiType", required = false, defaultValue = "0") int notiType,
			@RequestParam(value = "sendPush", required = false, defaultValue = "0") int sendPush,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "새로운 공지사항이 등록 되었습니다.";

		try {
			if (noticeSeq == 0) {
				Notice notice = new Notice();
				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				// notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.addNotice(notice);
				noticeSeq = noticeDao.getLastSeq();
				
			/*	if(notice.getSendPush()==1){//푸시 발송 설정이면
					
					List<User>list = userdao.getUserPushList();
					for (int i=0; i<list.size(); i++) {
						User user = (User) list.get(i);
					
						if (user.getPushkey().equals("") == false) {
						
							Push push = new Push();
							push.setBadge(1);
							push.setOs(user.getOsType());
							push.setPushKey(user.getPushkey());
							push.setMsgType(Push.MSG_TYPE_NOTICE);
							push.setUserid(user.getUserId());
							push.setStatus(0);
							push.setServiceId("RECOVER");
							push.setPushType(1);							
							push.setMsg(message);
							push.setMsgKey("0");
							userdao.addPush(push);
							userdao.updateBadge(user.getUserId(),user.getNoticeBadge()+1);
						}
					}
				}*/

				result = true;
				message = "등록되었습니다.";
			} else {
				Notice notice = noticeDao.getNotice(noticeSeq);

				notice.setUserId(userId);
				notice.setTitle(title);
				notice.setStartDate(startDate);
				notice.setEndDate(endDate);
				// notice.setNotiType(notiType);
				notice.setSendPush(sendPush);
				notice.setContentsHtml(contentsHtml);
				notice.setContentsText(contentsText);
				noticeDao.updateNotice(notice);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		map.put("noticeSeq", noticeSeq);
		map.put("result", result);
		map.put("message", message);

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 공지사항 삭제
	@RequestMapping("/admin/board/notice/notice_delete_do.go")
	public String noticeDeleteDoController(@RequestParam int noticeSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			// 게시물 삭제
			noticeDao.deleteNotice(noticeSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}
	
	//////////////////////qna
	
	// QNA
	@RequestMapping("/admin/board/qna/qna.go")
	public String qnaController(
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			HttpSession session, Model model) {

		return "/admin/board/qna/qna";
	}

	// QNA 리스트

	@RequestMapping("/admin/board/qna/qna_list.go")
	public String qnaListController(
			@RequestParam(value = "page", required = false, defaultValue = "1") int page,
			@RequestParam(value = "keyword", required = false, defaultValue = "") String keyword,
			@RequestParam(value = "cate", required = false, defaultValue = "0") int cate,
			HttpSession session, Model model) {

		List<Qna> list = null;
		int count = 0;
		int notiType = 0;

		

		list = qnaDao.getQnaList(keyword,cate, page, ITEM_COUNT_PER_PAGE);
		count = qnaDao.getCount(keyword,cate);
		

		// 페이징
		String paging = Paging.getPaging(page, count, ITEM_COUNT_PER_PAGE,
				PAGE_COUNT_PER_PAGING);

		model.addAttribute("list", list);
		model.addAttribute("paging", paging);
		model.addAttribute("keyword", keyword);
		model.addAttribute("currentPage", page);

		return "admin/board/qna/qna_list";
	}

	// QNA 등록/수정
	@RequestMapping("/admin/board/qna/qna_edit.go")
	public String qnaEditController(
			@RequestParam(value = "qnaSeq", required = false, defaultValue = "0") int qnaSeq,
			Model model) {
		
		Qna qna = null;
		if (qnaSeq == 0) {
			qna = new Qna();
		} else {
			qna = qnaDao.getQna(qnaSeq);
		}

		model.addAttribute("qna", qna);


		return "admin/board/qna/qna_edit";
	}

	// QNA 수정의 처리
	@RequestMapping("/admin/board/qna/qna_edit_do.go")
	public String qnaEditDoController(
			HttpServletRequest req,
			@RequestParam(value = "qnaSeq", required = false, defaultValue = "0") int qnaSeq,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "cateKind", required = false, defaultValue = "0") int cateKind,
			@RequestParam(value = "title", required = false, defaultValue = "") String title,
			@RequestParam(value = "ir1", required = false, defaultValue = "") String contentsHtml,
			@RequestParam(value = "ir1_text", required = false, defaultValue = "") String contentsText,
			HttpServletResponse res, Model model) throws IllegalStateException,
			IOException {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			if (qnaSeq == 0) {
				Qna qna = new Qna();
				qna.setUserId(userId);
				qna.setTitle(title);
				qna.setCateKind(cateKind);
				qna.setContentsHtml(contentsHtml);
				qna.setContentsText(contentsText);
				qnaDao.addQna(qna);

				result = true;
				message = "등록되었습니다.";
			} else {
				Qna qna = qnaDao.getQna(qnaSeq);
				qna.setUserId(userId);
				qna.setTitle(title);
				qna.setCateKind(cateKind);
				qna.setContentsHtml(contentsHtml);
				qna.setContentsText(contentsText);
				qnaDao.updateQna(qna);
				result = true;
				message = "수정되었습니다.";
			}
		} catch (Exception e) {
			message = e.getMessage();
		}
		map.put("qnaSeq", qnaSeq);
		map.put("result", result);
		map.put("message", message);

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// QNA 삭제
	@RequestMapping("/admin/board/qna/qna_delete_do.go")
	public String qnaDeleteDoController(
			@RequestParam int qnaSeq,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			
			qnaDao.deleteQna(qnaSeq);

			map.put("message", "게시물이 삭제되었습니다.");
			map.put("result", true);
		} catch (Exception e) {

			map.put("message", "게시물이 삭제되지 않았습니다.\n" + e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}



}
