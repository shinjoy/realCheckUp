
package kr.nomad.mars;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.gson.Gson;
import com.ibm.icu.util.Calendar;
import com.oreilly.servlet.MultipartRequest;


import kr.nomad.mars.dao.ConfigDao;

import kr.nomad.mars.dao.MagazineDao;

import kr.nomad.mars.dao.NoticeDao;

import kr.nomad.mars.dao.UserDao;
import kr.nomad.mars.dto.Config;
import kr.nomad.mars.dto.Magazine;

import kr.nomad.mars.dto.Notice;

import kr.nomad.mars.dto.User;

import kr.nomad.util.F;
import kr.nomad.util.ImageUtil;
import kr.nomad.util.Response;
import kr.nomad.util.T;
import kr.nomad.util.XlsxWriter;
import kr.nomad.util.file.UniqFileRenamePolicy;
import net.sf.json.JSONObject;

@Controller
public class ServerController {

	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);

	@Autowired
	UserDao userdao;

/*	@Autowired
	UbloodDao ublooddao;

	@Autowired
	UPressDao upressdao;

	@Autowired
	UWeightDao uweightdao;

	@Autowired
	UCntDao ucntdao;

	@Autowired
	UCvriskDao ucvriskdao;

	@Autowired
	UMediDao umedidao;

	@Autowired
	UPresDao upresdao;

	@Autowired
	UGoalDao ugoaldao;

	@Autowired
	UBasicDao ubasicdao;
*/
	@Autowired
	NoticeDao noticedao;

	/*@Autowired
	MedExamDao medexamdao;

	@Autowired
	AnalisysDao anlisysdao;

	@Autowired
	PointerDao pointerdao;

	@Autowired
	UColDao ucoldao;

	@Autowired
	UHbDao uhbdao;

	@Autowired
	PeriodDao perioddao;

	@Autowired
	CperiodDao cperioddao;

	@Autowired
	EperiodDao eperioddao;

	@Autowired
	CvriskDao cvriskdao;

	@Autowired
	DayDao daydao;

	@Autowired
	WeekDao weekdao;

	@Autowired
	CommentDao commentdao;

	@Autowired
	WeekPointer wkpointer;

	@Autowired
	UMediLogDao uMediLogDao;*/

	@Autowired
	MagazineDao magaDao;
	@Autowired
	ConfigDao configdao;
	/*@Autowired
	MonthDao monthdao;

	

	@Autowired
	ReportDao reportdao;

	@Autowired
	CounselDao counseldao;

	@Autowired
	ManageIndexDao mindexdao;

	@Autowired
	PushDao pushDao;
	@Autowired
	BadgeDao badgeDao;

	@Autowired
	ChatCounselDao chatCounselDao;

	@Autowired
	ChatRoomDao chatRoomDao;

	@Autowired
	ChatMsgDao chatMsgDao;

	@Autowired
	ChatMemberDao chatMemberDao;
	
	@Autowired ReportHistoryDao reportHistoryDao;
*/

	// 페이지당 아이템 갯수
	@Value("#{config['page.itemCountPerPage']}")
	int ITEM_COUNT_PER_PAGE;

	// 페이징당 페이지 갯수
	@Value("#{config['page.pageCountPerPaging']}")
	int PAGE_COUNT_PER_PAGING;

	// 파일 루트
	@Value("#{config['file.root']}")
	String FILE_ROOT;

	String FILE_PATH = "";
	String FILE_LOCAL_PATH = "";

	// 파일 최대크기(Mb)
	@Value("#{config['file.maxSize']}")
	int FILE_MAX_SIZE;

	public String SERVER_DOMAIN = "http://mint.aimmed.com:8070";
	public String GOOGLE_MAIL_ID = "aimmednote@gmail.com";
	public String GOOGLE_MAIL_PW = "Tkdfkdlxm*";
	
	public String DEFAULT_COUNSELOR_ID = "counselor@test.com";


	private int category1;

	@RequestMapping("/api_view.go")
	public String wUserMenuController(Model model) {

		return "/api_view";
	}

	/**
	 * 회원가입
	 * 
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/aimmed_check.go")
	public String aimmedCheckController(
		@RequestParam(value = "userName", required = false, defaultValue = "") String userName,
		@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
		@RequestParam(value = "birthday", required = false, defaultValue = "") String birthday,
		HttpServletRequest req, HttpServletResponse res
	) {

		Map<String, Object> map = new HashMap<String, Object>();
		
		int isAimmedUser = 0;
		String userMobile = "";
		String userBirth = "";
		String groupCode = "";
		String groupName = "";
		String aimmedId = "";

		try {

			// 끌어모았어 get 요청 URL 문자열 사용 URLEncoder.encode 대한 특별한 및 안 보이는 문자 인코딩 진행하다
			String getURL = "http://api.aimmed.co.kr/recovery/check_user.asp";
			String secret = "AimmedRecover";
			getURL += "?name="+ URLEncoder.encode(userName, "UTF-8");
			getURL += "&mobile="+ phoneNumber;
			getURL += "&birth="+ birthday;
			getURL += "&secret="+ secret;
			
			//String getURL = GET_URL + "?name=" + URLEncoder.encode("zhangshan", "utf-8");
			URL getUrl = new URL(getURL);
			// 끌어모았어 URL을 열 따라 연결할 URL 형식은 따라 할 URL.openConnection 함수, 
			// 다시 다른 URLConnection 하위 클래스 대상, 여기 URL 한 http 때문에 실제 복귀 것은 HttpURLConnection
			HttpURLConnection connection = (HttpURLConnection) getUrl.openConnection();
			// 을 연결 하지만 실제로는 get request 반드시 다음 구의 connection.getInputStream () 함수 중 비로소 진정한 발 까지 서버
			connection.connect();
			// 확실한 입력 및 사용 Reader 읽기
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));// 인코딩 설정 을 함께 했 다., 그렇지 않으면, 중국어
			System.out.println("=============================");
			System.out.println("Contents of get request");
			System.out.println("=============================");
			String lines;
			String message = "";
			while ((lines = reader.readLine()) != null) {
				String str = new String(lines.getBytes());
				message += URLDecoder.decode(str, "utf-8");
				System.out.println(lines);
			}
			reader.close();
			// 연결 끊기
			connection.disconnect();
			
			JSONObject jsonObject = JSONObject.fromObject(message);
			String statusCode = jsonObject.getString("STATUS_CODE");
			
			if (statusCode.equals("200")) {
				
				//userName = jsonObject.getString("name");
				//userMobile = jsonObject.getString("mobile");
				//userBirth = jsonObject.getString("birth");
				groupCode = jsonObject.getString("group_code");
				groupName = jsonObject.getString("group_name");
				aimmedId = jsonObject.getString("mem_id");
				
				isAimmedUser = 1;
				
				map.put("aimmedId", aimmedId);
				map.put("groupCode", groupCode);
				map.put("groupName", groupName);
				map.put("message", "에임메드 회원입니다.");
				map.put("isAimmedUser", isAimmedUser);
			} else {
				map.put("aimmedId", aimmedId);
				map.put("groupCode", groupCode);
				map.put("groupName", groupName);
				map.put("message", "에임메드 회원이 아닙니다.");
				map.put("isAimmedUser", isAimmedUser);
			}


		} catch (Exception e) {
			map.put("aimmedId", aimmedId);
			map.put("groupCode", groupCode);
			map.put("groupName", groupName);
			map.put("message", e.getMessage());
			map.put("isAimmedUser", isAimmedUser);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;

	}


	
	/**
	 * 회원가입
	 * 
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/join.go")
	public String joinController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			@RequestParam(value = "userType", required = false, defaultValue = "0") int userType,
			@RequestParam(value = "userName", required = false, defaultValue = "") String userName,
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			@RequestParam(value = "birthday", required = false, defaultValue = "") String birthday,
			@RequestParam(value = "gender", required = false, defaultValue = "0") int gender,
			@RequestParam(value = "loginNaver", required = false, defaultValue = "") int loginNaver,
			@RequestParam(value = "loginKakao", required = false, defaultValue = "") int loginKakao,
			@RequestParam(value = "osType", required = false, defaultValue = "") String osType,
			@RequestParam(value = "osVersion", required = false, defaultValue = "") String osVersion,
			@RequestParam(value = "appVersion", required = false, defaultValue = "") String appVersion,
			@RequestParam(value = "deviceName", required = false, defaultValue = "") String deviceName,
			@RequestParam(value = "deviceId", required = false, defaultValue = "") String deviceId,
			@RequestParam(value = "pushkey", required = false, defaultValue = "") String pushkey,
			@RequestParam(value = "usePushservice", required = false, defaultValue = "") int usePushservice,
			@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName,
			@RequestParam(value = "aimmedId", required = false, defaultValue = "") String aimmedId,
			@RequestParam(value = "groupCode", required = false, defaultValue = "") String groupCode,
			@RequestParam(value = "groupName", required = false, defaultValue = "") String groupName,

	HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			boolean userCheck = userdao.correctId(userId);
			if (userCheck) {
				map.put("result", false);
				map.put("message", "중복된 이메일 주소입니다. 다른 주소로 입력해 주십시오. 지속적인 문제 발생 시 (관리자이메일)로 이메일을 보내 주세요.");
			} else {
				
				
				User uu = new User();
				uu.setAppVersion(appVersion);
				uu.setBirthday(birthday);
				uu.setDeviceId(deviceId);
				uu.setDeviceName(deviceName);
				uu.setFileName(fileName);
				uu.setGender(gender);
				uu.setLoginKakao(loginKakao);
				uu.setLoginNaver(loginNaver);
				uu.setOsType(osType);
				uu.setOsVersion(osVersion);
				uu.setPhoneNumber(phoneNumber);
				uu.setPushkey(pushkey);
				uu.setStatus(1);
				uu.setUsePushservice(usePushservice);
				uu.setUserId(userId);
				uu.setUserName(userName);
				uu.setUserType(userType);
				uu.setUserMed(0);
				uu.setAimmedId(aimmedId);
				uu.setGroupCode(groupCode);
				uu.setGroupName(groupName);

				// String enPw = Sha256Util.encryptPassword(password);

				uu.setPassword(password);
				userdao.addUser(uu);
			

				map.put("result", true);
				map.put("message", "회원가입이 완료되었습니다.");
			}
		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;

	}

	@RequestMapping("/m/profile_photo.go")
	public String proUploadController(HttpServletRequest req, HttpServletResponse res, Model model,
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName) {
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			userdao.updateProfileImgAdd(userId, fileName);
			map.put("result", true);
		} catch (Exception e) {
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	// 프로필 이미지등록
	@RequestMapping("/m/photo_add.go")
	public String proUploadController(HttpServletRequest req, HttpServletResponse res, Model model

	) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = false;

		String FILE_PATH = "/files/temp/";
		String FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
		String photo = "";
		String fileName = "";
		String path = "";
		String photoPre = "";
		String userId = "";
		int fileSize = FILE_MAX_SIZE * 1024 * 1024;

		try {
			req.setCharacterEncoding("utf-8");

			File file = null;

			MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileSize, "UTF-8",
					new UniqFileRenamePolicy());

			path = F.nullCheck(multi.getParameter("path"), "");
			Enumeration files = multi.getFileNames();
			while (files.hasMoreElements()) {
				String elementName = (String) files.nextElement();
				file = multi.getFile(elementName);
				if (file != null) {
					photo = file.getName();
				}

			}

			String yearMonth = T.getTodayYear() + T.getTodayMonth();

			// fileName = userId +"_"+ photo;
			fileName = photo;
			photoPre = yearMonth + "/";

			File copyFolder = new File(FILE_ROOT + "/files/" + path + "/" + photoPre);
			if (!copyFolder.exists()) {
				copyFolder.mkdirs();
			}
			// 파일 복사
			FileInputStream fis = new FileInputStream(FILE_LOCAL_PATH + photo);
			FileOutputStream fos = new FileOutputStream(FILE_ROOT + "/files/" + path + "/" + photoPre + fileName);
			int data = 0;
			while ((data = fis.read()) != -1) {
				fos.write(data);
			}
			fis.close();
			fos.close();

			// 축소이미지 저장
			File newFile = new File(FILE_LOCAL_PATH + photo);
			File thumbFile = new File(FILE_ROOT + "/files/" + path + "/" + photoPre + "thumb/" + fileName);
			if (!thumbFile.exists()) {
				thumbFile.mkdirs();
			}
			try {
				ImageUtil.resize(newFile, thumbFile, 200, 0);
				result = true;
			} catch (IOException e) {
				e.printStackTrace();
			}

			// 복사한뒤 원본파일을 삭제함
			file.delete();
			if (path.equals("profile")) {
				userId = F.nullCheck(multi.getParameter("userId"), "");
				userdao.updateProfileImgAdd(userId, "/files/" + path + "/" + photoPre + fileName);
			}

			map.put("result", true);
			map.put("message", "사진이 등록되었습니다.");
			map.put("photo", "/files/" + path + "/" + photoPre + fileName);

		} catch (Exception e) {
			map.put("result", false);
			map.put("message", "사진 등록에 실패하였습니다.\n" + e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);

		Gson gson = new Gson();
		String outputstr = gson.toJson(jsonObject);
		Response.responseWrite(res, outputstr);

		return null;

	}

	// 사진 업로드
	@RequestMapping("/m/photo_upload.go")
	public String photoUploadController(HttpServletRequest req, HttpServletResponse res, Model model) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = false;

		String FILE_PATH = "/files/temp/";
		String FILE_LOCAL_PATH = FILE_ROOT + FILE_PATH;
		String userId = "";
		String photo = "";
		String fileName = "";
		String photoPre = "";
		String type = "";
		int isThumb = 0;
		int addThumb = 0;
		String orgFileName = "";

		int fileSize = FILE_MAX_SIZE * 1024 * 1024;

		try {
			req.setCharacterEncoding("utf-8");

			File file = null;
			try {
				MultipartRequest multi = new MultipartRequest(req, FILE_LOCAL_PATH, fileSize, "UTF-8",
						new UniqFileRenamePolicy());

				// 폼에서 입력한 값을 가져옴
				userId = F.nullCheck(multi.getParameter("userId"), "");
				type = F.nullCheck(multi.getParameter("type"), "");
				isThumb = Integer.parseInt(F.nullCheck(multi.getParameter("isThumb"), "0"));
				addThumb = Integer.parseInt(F.nullCheck(multi.getParameter("addThumb"), "0"));
				orgFileName = F.nullCheck(multi.getParameter("fileName"), "");

				Enumeration files = multi.getFileNames();
				while (files.hasMoreElements()) {
					String elementName = (String) files.nextElement();
					file = multi.getFile(elementName);
					if (file != null) {
						photo = file.getName();
					}
				}

				if (type.equals("profile")) {
					fileName = userId + "." + photo.substring(photo.lastIndexOf(".") + 1, photo.length());
				} else {
					String yearMonth = T.getTodayYear() + T.getTodayMonth();

					fileName = photo;
					photoPre = yearMonth + "/";
				}
				if (isThumb == 1) {
					photoPre += "thumb/";
				}

				File copyFolder = new File(FILE_ROOT + "/files/" + type + "/" + photoPre);
				if (!copyFolder.exists()) {
					copyFolder.mkdirs();
				}

				// 파일 복사
				FileInputStream fis = new FileInputStream(FILE_LOCAL_PATH + photo);
				FileOutputStream fos = new FileOutputStream(FILE_ROOT + "/files/" + type + "/" + photoPre + fileName);
				int data = 0;
				while ((data = fis.read()) != -1) {
					fos.write(data);
				}
				fis.close();
				fos.close();

				// 필요시에 썸네일 저장
				if (addThumb == 1) {
					// 축소이미지 저장
					File newFile = new File(FILE_LOCAL_PATH + photo);
					File thumbFile = new File(FILE_ROOT + "/files/" + type + "/" + photoPre + "thumb/" + fileName);
					if (!thumbFile.exists()) {
						thumbFile.mkdirs();
					}
					try {
						ImageUtil.resize(newFile, thumbFile, 300, 0);
						result = true;
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				// 원본 이미지는 최소이미지도 함께 저장
				if (isThumb == 0) {
					// 축소이미지 저장
					File newFile = new File(FILE_LOCAL_PATH + photo);
					File thumbFile = new File(FILE_ROOT + "/files/" + type + "/" + photoPre + "tiny/" + fileName);
					if (!thumbFile.exists()) {
						thumbFile.mkdirs();
					}
					try {
						ImageUtil.resize(newFile, thumbFile, 50, 0);
						result = true;
					} catch (IOException e) {
						e.printStackTrace();
					}
				}

				// 복사한뒤 원본파일을 삭제함
				file.delete();
			} catch (Exception e) {
				e.getMessage();
			}

			map.put("orgFileName", orgFileName);
			map.put("photo", fileName);
			map.put("path", "/files/" + type + "/" + photoPre);
			// map.put("thumbPath", "/files/"+ type +"/thumb/"+photoPre);
			map.put("result", true);
			map.put("message", "사진이 등록되었습니다.");

		} catch (Exception e) {
			map.put("result", false);
			map.put("message", "사진 등록에 실패하였습니다.\n" + e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);

		Gson gson = new Gson();
		String outputstr = gson.toJson(jsonObject);
		Response.responseWrite(res, outputstr);

		return null;
	}

	/* 프로필삭제 */

	@RequestMapping("/m/profile_photo_delete.go")
	public String prodeleteController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			User user = userdao.getUsers(userId);
			map.put("result", true);
			map.put("message", "삭제되었습니다.");

			if (user != null) {
				// 파일삭제

				if (user.getFileName() != "") {
					
					
					filedelete(user.getFileName());
				}
				userdao.updateProfileImgDel(userId);

				map.put("message", "프로필 이미지가 삭제되었습니다.");
				map.put("result", true);
			} else {
				map.put("message", "존재하지 않는 ID 입니다.");
				map.put("result", false);
			}

		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	/**
	 * 로그인
	 * 
	 * @param loginId
	 * @param loginPw
	 * @param res
	 * @return
	 */
	@RequestMapping("/m/login.go")
	public String loginController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			@RequestParam(value = "os_version", required = false, defaultValue = "") String osVersion,
			@RequestParam(value = "os_type", required = false, defaultValue = "") String osType,
			@RequestParam(value = "device_name", required = false, defaultValue = "") String deviceName,
			@RequestParam(value = "device_id", required = false, defaultValue = "") String deviceId,
			@RequestParam(value = "pushKey", required = false, defaultValue = "") String pushKey,
			@RequestParam(value = "loginNaver", required = false, defaultValue = "") int loginNaver,
			@RequestParam(value = "loginKakao", required = false, defaultValue = "") int loginKakao,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		String enPw = "";
		try {

			boolean userCheck = userdao.correctId(userId);
			if (userCheck == true) {

				boolean loginCheck = false;

				if (loginNaver == 1) {
					loginCheck = userdao.correctNaver(userId);
				} else if (loginKakao == 1) {
					loginCheck = userdao.correctKakao(userId);
				} else {
					// enPw = Sha256Util.encryptPassword(user.getPassword());
					loginCheck = userdao.correctPw(userId, password);
				}

				if (loginCheck == true) {
					
					User userdata = userdao.getUsers(userId);
					if(userdata.getStatus()!=4){
						
					//	UserBasic userBasic = ubasicdao.getUserBasic(userId);
						HttpSession session = req.getSession();
						session.setAttribute("USER_ID", userdata.getUserId());
						session.setAttribute("USER_NAME", userdata.getUserName());
	
						User uu = new User();
						uu.setUserId(userId);
						uu.setPassword(password);
						uu.setOsType(osType);
						uu.setOsVersion(osVersion);
						uu.setDeviceName(deviceName);
						uu.setDeviceId(deviceId);
						uu.setPushkey(pushKey);
	
						userdao.updateUserData(uu);
	
						String birth = userdata.getBirthday();
						int birthyear = Integer.parseInt(birth.substring(0, 4));
						int nowyear = Integer.parseInt(T.getTodayYear());
						int age = nowyear - birthyear;
	
						map.put("message", "로그인이 성공되었습니다.");
						map.put("result", true);
						map.put("userName", userdata.getUserName());
						map.put("userType", userdata.getUserType());
						map.put("photo", userdata.getFileName());
						map.put("userMed", userdata.getUserMed());
						map.put("age", age);
						
						map.put("gender", userdata.getGender());
						
						map.put("loginNaver", loginNaver);
						map.put("loginKakao", loginKakao);
						map.put("loginEimmed", 0);
						map.put("gender", userdata.getGender());
					
						
					}else{
						map.put("message", "탈퇴한 사용자 입니다.");
						map.put("result", false);
					}

				} else {
					map.put("message", "비밀번호가 일치하지 않습니다.");
					map.put("result", false);
					map.put("userType", 3);
				}

			} else {
				map.put("message", "해당 아이디는 존재하지 않습니다.");
				map.put("result", false);
				map.put("userType", 3);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
			map.put("userType", 3);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	/**
	 * 아이디중복체크
	 * 
	 * @return
	 */

	@RequestMapping("/m/dup_check_id.go")
	public String checkIdController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean userCheck = userdao.correctId(userId);
			if (userCheck == true) {

				map.put("message", "중복된 이메일 주소입니다 다른주소로 입력해주세요. " + "지속적인 문제 발생시 (관리자이메일)로 이메일을 보내주세요");
				map.put("result", true);

			} else {

				map.put("message", "사용가능한 이메일입니다.");
				map.put("result", false);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	/**
	 * 전화번호중복체크
	 * 
	 * @return
	 */

	@RequestMapping("/m/dup_check_phone.go")
	public String checkPhoneController(
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			boolean phoneCheck = userdao.correctPhone(phoneNumber);
			if (phoneCheck == true) {

				map.put("message", "사용중인 전화번호 입니다.");
				map.put("result", false);

			} else {

				map.put("message", "사용할 수 있는 전화번호입니다.");
				map.put("result", true);
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	/**
	 * 아이디찾기
	 * 
	 * @return
	 */
	@RequestMapping("/m/myid.go")
	public String searchIdController(
			@RequestParam(value = "userName", required = false, defaultValue = "") String userName,
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			User user = userdao.findId(phoneNumber, userName);

			if (user != null) {
				String userId = user.getUserId();
				map.put("message", userId);
				map.put("result", true);

			} else {
				map.put("message", "회원님의 ID를 찾을 수 없습니다." + "아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
				map.put("result", false);

			}
		} catch (Exception e) {
			map.put("result", false);
			map.put("message", "error : " + e.getMessage());

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	/**
	 * 비밀번호찾기
	 * 
	 * @return
	 */

	@RequestMapping("/m/mypass.go")
	public String searchPwController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		boolean userCheck = userdao.findPw(userId, phoneNumber);
		if (userCheck == false) {
			map.put("result", false);
			map.put("message", "회원님의 데이터를 찾을 수 없습니다." + "아직 회원이 아니시면 아래 회원가입 버튼을 클릭해 주세요");
		} else {
			try {

				map.put("result", true);
				map.put("message", "비밀번호를 재설정해주세요.");
			} catch (Exception e) {
				map.put("result", false);
				map.put("message", "error : " + e.getMessage());
			}
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}


	

/*	 복약관리 

	@RequestMapping("/m/medi_list.go")
	public String mediListController(@RequestParam(value = "userId", required = false, defaultValue = "") String id,
			@RequestParam(value = "page", required = false, defaultValue = "1") int page, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		String today = T.getToday();
		int week = T.getWeekdayNum();

		List<UserMedi> list = umedidao.getUserMediList(id,page, ITEM_COUNT_PER_PAGE);
		// List<UserMedi> list =
		// umedidao.getUserMediList(id,page,ITEM_COUNT_PER_PAGE);
		map.put("result", true);
		map.put("list", list);
		map.put("cnt", umedidao.getUserMedicnt(id));

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	//복약관리 오늘것만.
	@RequestMapping("/m/medi_list2.go")
	public String mediList2Controller(
			@RequestParam(value = "userId", required = false, defaultValue = "") String id,
			HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		String today = T.getToday();
		int week = T.getWeekdayNum();
		
		List<UserMedi> list = umedidao.getUserMediList(id,week,today);
		// List<UserMedi> list =
		// umedidao.getUserMediList(id,page,ITEM_COUNT_PER_PAGE);
		map.put("result", true);
		map.put("list", list);
	//	map.put("cnt", umedidao.getUserMedicnt(id,week));

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	/* 복약체크 */
/*	@RequestMapping("/m/medi_eat_check.go")
	public String mediEatCheckController(
			@RequestParam(value = "medSeq", required = false , defaultValue = "0") int medSeq, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			String today = T.getToday();
			int count = uMediLogDao.getUMediLogCount(medSeq, today);

			if (count == 0) {
				UserMediLog uml = new UserMediLog();
				uml.setMedSeq(medSeq);
				uMediLogDao.addUMediLog(uml);
				map.put("eatLog", 1);
				map.put("result", true);
				map.put("message", "약을 먹었습니다.");
			} else {
				uMediLogDao.deleteUMediLog(medSeq, today);
				map.put("eatLog", 0);
				map.put("result", true);
				map.put("message", "약을 먹지 않았습니다.");
			}
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	 복약등록 

	@RequestMapping("/m/medi_edit_do.go")
	public String mediEditdoController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "mediname", required = false, defaultValue = "") String mediname,
			@RequestParam(value = "meditime", required = false, defaultValue = "") String meditime,
			@RequestParam(value = "medialert", required = false, defaultValue = "1") int medialert,
			@RequestParam(value = "medihospital", required = false, defaultValue = "") String medihospital,
			@RequestParam(value = "mediSeq", required = false, defaultValue = "0") int mediSeq,
			@RequestParam(value = "mediweek1", required = false, defaultValue = "0") int mediweek1,
			@RequestParam(value = "mediweek2", required = false, defaultValue = "0") int mediweek2,
			@RequestParam(value = "mediweek3", required = false, defaultValue = "0") int mediweek3,
			@RequestParam(value = "mediweek4", required = false, defaultValue = "0") int mediweek4,
			@RequestParam(value = "mediweek5", required = false, defaultValue = "0") int mediweek5,
			@RequestParam(value = "mediweek6", required = false, defaultValue = "0") int mediweek6,
			@RequestParam(value = "mediweek7", required = false, defaultValue = "0") int mediweek7,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		UserMedi um = new UserMedi();

		um.setMedialert(medialert);
		um.setMedihospital(medihospital);
		um.setMediname(mediname);
		um.setMeditime(meditime);
		um.setUserId(userId);
		um.setMediSeq(mediSeq);
		um.setMediweek1(mediweek1);
		um.setMediweek2(mediweek2);
		um.setMediweek3(mediweek3);
		um.setMediweek4(mediweek4);
		um.setMediweek5(mediweek5);
		um.setMediweek6(mediweek6);
		um.setMediweek7(mediweek7);

		try {
			if (mediSeq == 0) {// 신규등록

				umedidao.addUserMedi(um);
				map.put("message", "알림이 등록되었습니다.");

			} else { // 수정

				umedidao.updateUserMedi(um);
				if (medialert == 0) {
					map.put("message", "알림이 해제되었습니다.");
				} else {
					map.put("message", "알림이 설정되었습니다.");
				}

			}

			map.put("result", true);

		} catch (Exception e) {

			map.put("result", false);
			map.put("message", e.getMessage());

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	 복약삭제 

	@RequestMapping("/m/medi_delete.go")
	public String medideleteController(

	@RequestParam(value = "medSeq", required = false, defaultValue = "") int medSeq, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			umedidao.deleteUserMedi(medSeq);
			map.put("result", true);
			map.put("message", "삭제되었습니다.");

		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
*/
	/* 처방전관리 */

	/*@RequestMapping("/m/pre_list.go")
	public String preController(@RequestParam(value = "userId", required = false, defaultValue = "") String id,
			@RequestParam(value = "page", required = false, defaultValue = "") int page, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		List<UserPres> list = upresdao.getUserPresList(id, page, ITEM_COUNT_PER_PAGE);

		map.put("list", list);
		map.put("result", true);
		map.put("cnt", upresdao.getUserPresCnt(id));
		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	 처방전등록 

	@RequestMapping("/m/pre_edit_do.go")
	public String preEditdoController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "hosName", required = false, defaultValue = "") String hosName,
			@RequestParam(value = "fileName", required = false, defaultValue = "") String fileName,
			@RequestParam(value = "comment", required = false, defaultValue = "") String comment,
			@RequestParam(value = "preSeq", required = false, defaultValue = "0") int preSeq, HttpServletRequest req,
			HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		UserPres up = new UserPres();
		up.setUserId(userId);
		up.setHosName(hosName);
		up.setFileName(fileName);
		up.setComment(comment);
		up.setPreSeq(preSeq);
		try {
			if (preSeq == 0) {// 신규등록

				upresdao.addUserPres(up);

			} else { // 수정

				upresdao.updateUserPres(up);

			}

			map.put("result", true);
			map.put("message", "완료되었습니다.");

		} catch (Exception e) {

			map.put("result", false);
			map.put("message", e.getMessage());

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	 처방전삭제 

	@RequestMapping("/m/pre_delete.go")
	public String predeleteController(@RequestParam(value = "preSeq", required = false, defaultValue = "") int preSeq,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {

			map.put("result", true);
			map.put("message", "삭제되었습니다.");

			UserPres userpres = upresdao.UserPresOne(preSeq);

			if (userpres.getFileName() != "") {
				filedelete(userpres.getFileName());
				
			}

			upresdao.deleteUserPres(preSeq);

		} catch (Exception e) {
			map.put("result", false);
			map.put("message", e.getMessage());
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}*/

	/* 계정관리 */

	@RequestMapping("/m/myinfo.go")
	public String myinfoController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			User user = userdao.getUsers(userId);
			map.put("data", user);
			map.put("result", true);

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	/* 탈퇴 */

	@RequestMapping("/m/myinfo_drop_do.go")
	public String myinfoDropController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		String enPw = "";

		try {

			// enPw = Sha256Util.encryptPassword(password);
			boolean loginCheck = userdao.correctPw(userId, password);

			if (loginCheck) {
				/*User uu = userdao.getUser(userId);
				List<UserPres> upList = upresdao.getUserPresList(userId);
				
				ubasicdao.deleteUserBasic(userId);
				ublooddao.deleteUserBlood(userId);
				ucntdao.deleteUserCnt(userId);
				ucvriskdao.deleteUserCvrisk(userId);
				umedidao.deleteUserMedi2(userId);
				upresdao.deleteUserPres2(userId);
				upressdao.deleteUserPress(userId);*/
				userdao.updatedrop(userId); ///4번 탈퇴자 
			/*	uweightdao.deleteUserWeight(userId);
				ugoaldao.deleteUserGoal(userId);
				ucoldao.deleteUserCol(userId);
				uhbdao.deleteUserhb(userId);
				//프사지우기
				if(uu.getFileName()!=null || uu.getFileName()!=""){
					filedelete(uu.getFileName());
					
				}
				//처방전 이미지 지우기
				for(int i=0;i<upList.size();i++){
					UserPres up = upList.get(i);
					if(up.getFileName()!=null || up.getFileName()!=""){
						filedelete(up.getFileName());
						
					}
				}*/
				
				map.put("message", "정상적으로 탈퇴되었습니다.");
				map.put("result", true);

			} else {
				map.put("message", "비밀번호가 일치하지않습니다");
				map.put("result", false);

			}

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 휴대전화변경
	@RequestMapping("/m/myinfo_phone_do.go")
	public String myphoneController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			@RequestParam(value = "phoneNumber", required = false, defaultValue = "") String phoneNumber,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		String enPw = "";

		try {
			// enPw = Sha256Util.encryptPassword(password);
			boolean loginCheck = userdao.correctPw(userId, password);
			if (loginCheck) {

				userdao.editPhone(userId, phoneNumber);
				map.put("message", "변경되었습니다");
				map.put("result", true);

			} else {
				map.put("message", "비밀번호가 일치하지않습니다");
				map.put("result", false);

			}

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 비밀번호재설정
	@RequestMapping("/m/new_mypass.go")
	public String mynpassController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		String enPw = "";

		try {
			// enPw = Sha256Util.encryptPassword(password);

			userdao.updatePw(userId, password);
			map.put("message", "변경되었습니다");
			map.put("result", true);

		} catch (Exception e) {
			map.put("message", "변경에 실패하였습니다.");
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 비밀번호변경
	@RequestMapping("/m/myinfo_pass_do.go")
	public String mypassController(@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			@RequestParam(value = "password", required = false, defaultValue = "") String password,
			@RequestParam(value = "npassword", required = false, defaultValue = "") String npassword,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";
		String enPw = "";

		try {
			// enPw = Sha256Util.encryptPassword(password);
			boolean loginCheck = userdao.correctPw(userId, password);
			if (loginCheck) {
				// enPw = Sha256Util.encryptPassword(npassword);
				userdao.updatePw(userId, npassword);
				map.put("message", "변경되었습니다");
				map.put("result", true);

			} else {
				map.put("message", "비밀번호가 일치하지않습니다");
				map.put("result", false);

			}

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	
	//공지사항 진입 시점 
	@RequestMapping("/m/service.go")
	public String noticeController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			User uu = userdao.getUsers(userId);
			
			map.put("cnt", uu.getNoticeBadge());//내 뱃지갯수
			
			map.put("result", true);

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 공지사항

	@RequestMapping("/m/service_list.go")
	public String noticeController(
			@RequestParam(value = "page", required = false, defaultValue = "") int page,
		
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {
			
			List<Notice> list = noticedao.getNoticeMainList(page, ITEM_COUNT_PER_PAGE);
			int cnt = noticedao.getNoticeMainCount();
		
			map.put("data", list);
			map.put("cnt", cnt);
			map.put("result", true);

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}

	// 공지사항상세

	@RequestMapping("/m/service_detail.go")
	public String noticeDController(
			@RequestParam(value = "noticeSeq", required = false, defaultValue = "") int noticeSeq,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();
		boolean result = true;
		String message = "";

		try {

			Notice notice = noticedao.getNotice(noticeSeq);
			map.put("data", notice);
			map.put("result", true);

		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);

		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);

		return null;
	}


	/* 버전확인 */
	@RequestMapping("/m/now_version.go")
	public String nowVersionController(HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			Config config = configdao.getConfig();
			String version = config.getAppVersion();
			map.put("version", version);
			map.put("result", true);
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}



	/* 푸시 클리어 */
	@RequestMapping("/m/clear_noticeBadge.go")
	public String noticeBadgeController(
			@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
			HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
			
			userdao.updateBadge(userId, 0);
			
			map.put("result", true);
			
		} catch (Exception e) {
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}
	
	
	

	/* 로그아웃 */
	@RequestMapping("/m/logout.go")
	public String LogoutController(
		@RequestParam(value = "userId", required = false, defaultValue = "") String userId,
	
		HttpServletRequest req, HttpServletResponse res) {

		Map<String, Object> map = new HashMap<String, Object>();

		try {
		
			userdao.updateout(userId);
			map.put("result", true);
			map.put("message", "로그아웃 되었습니다.");
		} catch (Exception e) {
			map.put("message", e.getMessage());
			map.put("result", false);
		}

		JSONObject jsonObject = JSONObject.fromObject(map);
		Response.responseWrite(res, jsonObject);
		return null;
	}

	
	public void filedelete(String fullName){
		
		
		
		File file = new File(FILE_ROOT+fullName);
		file.delete();
		//썸네일
		String  path = fullName.substring(0,fullName.lastIndexOf("/"));//경로까지
		String fileName = fullName.substring(fullName.lastIndexOf("/"));//파일명
		String thumbName = path+"/thumb/"+fileName;
		File thumb = new File(FILE_ROOT+thumbName);
		thumb.delete();
		
	}
	

}
